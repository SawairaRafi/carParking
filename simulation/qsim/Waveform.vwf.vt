// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/19/2022 14:02:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    car_parking_system
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module car_parking_system_vlg_sample_tst(
	back_sensor,
	clk,
	EnterMoney,
	front_sensor,
	level1_movement,
	level2_movement,
	level3_movement,
	password,
	push_btn_clk,
	rst,
	user_name,
	user_type,
	vehicle_type,
	sampler_tx
);
input  back_sensor;
input  clk;
input [7:0] EnterMoney;
input  front_sensor;
input  level1_movement;
input  level2_movement;
input  level3_movement;
input [1:0] password;
input  push_btn_clk;
input  rst;
input [1:0] user_name;
input  user_type;
input [2:0] vehicle_type;
output sampler_tx;

reg sample;
time current_time;
always @(back_sensor or clk or EnterMoney or front_sensor or level1_movement or level2_movement or level3_movement or password or push_btn_clk or rst or user_name or user_type or vehicle_type)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module car_parking_system_vlg_check_tst (
	backGateOpens,
	cathode0,
	cathode1,
	cathode2,
	cathode3,
	Change,
	gateOpens,
	lcd_db,
	lcd_e,
	lcd_rs,
	lcd_rw,
	level,
	Money_Deposited,
	sampler_rx
);
input  backGateOpens;
input [6:0] cathode0;
input [6:0] cathode1;
input [6:0] cathode2;
input [6:0] cathode3;
input [7:0] Change;
input  gateOpens;
input [7:0] lcd_db;
input  lcd_e;
input  lcd_rs;
input  lcd_rw;
input [1:0] level;
input [7:0] Money_Deposited;
input sampler_rx;

reg  backGateOpens_expected;
reg [6:0] cathode0_expected;
reg [6:0] cathode1_expected;
reg [6:0] cathode2_expected;
reg [6:0] cathode3_expected;
reg [7:0] Change_expected;
reg  gateOpens_expected;
reg [7:0] lcd_db_expected;
reg  lcd_e_expected;
reg  lcd_rs_expected;
reg  lcd_rw_expected;
reg [1:0] level_expected;
reg [7:0] Money_Deposited_expected;

reg  backGateOpens_prev;
reg [6:0] cathode0_prev;
reg [6:0] cathode1_prev;
reg [6:0] cathode2_prev;
reg [6:0] cathode3_prev;
reg [7:0] Change_prev;
reg  gateOpens_prev;
reg [7:0] lcd_db_prev;
reg  lcd_e_prev;
reg  lcd_rs_prev;
reg  lcd_rw_prev;
reg [1:0] level_prev;
reg [7:0] Money_Deposited_prev;

reg  backGateOpens_expected_prev;
reg  gateOpens_expected_prev;

reg  last_backGateOpens_exp;
reg  last_gateOpens_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:13] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 13'b1;
end

// update real /o prevs

always @(trigger)
begin
	backGateOpens_prev = backGateOpens;
	cathode0_prev = cathode0;
	cathode1_prev = cathode1;
	cathode2_prev = cathode2;
	cathode3_prev = cathode3;
	Change_prev = Change;
	gateOpens_prev = gateOpens;
	lcd_db_prev = lcd_db;
	lcd_e_prev = lcd_e;
	lcd_rs_prev = lcd_rs;
	lcd_rw_prev = lcd_rw;
	level_prev = level;
	Money_Deposited_prev = Money_Deposited;
end

// update expected /o prevs

always @(trigger)
begin
	backGateOpens_expected_prev = backGateOpens_expected;
	gateOpens_expected_prev = gateOpens_expected;
end



// expected gateOpens
initial
begin
	gateOpens_expected = 1'bX;
end 

// expected backGateOpens
initial
begin
	backGateOpens_expected = 1'bX;
end 
// generate trigger
always @(backGateOpens_expected or backGateOpens or cathode0_expected or cathode0 or cathode1_expected or cathode1 or cathode2_expected or cathode2 or cathode3_expected or cathode3 or Change_expected or Change or gateOpens_expected or gateOpens or lcd_db_expected or lcd_db or lcd_e_expected or lcd_e or lcd_rs_expected or lcd_rs or lcd_rw_expected or lcd_rw or level_expected or level or Money_Deposited_expected or Money_Deposited)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected backGateOpens = %b | expected cathode0 = %b | expected cathode1 = %b | expected cathode2 = %b | expected cathode3 = %b | expected Change = %b | expected gateOpens = %b | expected lcd_db = %b | expected lcd_e = %b | expected lcd_rs = %b | expected lcd_rw = %b | expected level = %b | expected Money_Deposited = %b | ",backGateOpens_expected_prev,cathode0_expected_prev,cathode1_expected_prev,cathode2_expected_prev,cathode3_expected_prev,Change_expected_prev,gateOpens_expected_prev,lcd_db_expected_prev,lcd_e_expected_prev,lcd_rs_expected_prev,lcd_rw_expected_prev,level_expected_prev,Money_Deposited_expected_prev);
	$display("| real backGateOpens = %b | real cathode0 = %b | real cathode1 = %b | real cathode2 = %b | real cathode3 = %b | real Change = %b | real gateOpens = %b | real lcd_db = %b | real lcd_e = %b | real lcd_rs = %b | real lcd_rw = %b | real level = %b | real Money_Deposited = %b | ",backGateOpens_prev,cathode0_prev,cathode1_prev,cathode2_prev,cathode3_prev,Change_prev,gateOpens_prev,lcd_db_prev,lcd_e_prev,lcd_rs_prev,lcd_rw_prev,level_prev,Money_Deposited_prev);
`endif
	if (
		( backGateOpens_expected_prev !== 1'bx ) && ( backGateOpens_prev !== backGateOpens_expected_prev )
		&& ((backGateOpens_expected_prev !== last_backGateOpens_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port backGateOpens :: @time = %t",  $realtime);
		$display ("     Expected value = %b", backGateOpens_expected_prev);
		$display ("     Real value = %b", backGateOpens_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_backGateOpens_exp = backGateOpens_expected_prev;
	end
	if (
		( gateOpens_expected_prev !== 1'bx ) && ( gateOpens_prev !== gateOpens_expected_prev )
		&& ((gateOpens_expected_prev !== last_gateOpens_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gateOpens :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gateOpens_expected_prev);
		$display ("     Real value = %b", gateOpens_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_gateOpens_exp = gateOpens_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module car_parking_system_vlg_vec_tst();
// constants                                           
// general purpose registers
reg back_sensor;
reg clk;
reg [7:0] EnterMoney;
reg front_sensor;
reg level1_movement;
reg level2_movement;
reg level3_movement;
reg [1:0] password;
reg push_btn_clk;
reg rst;
reg [1:0] user_name;
reg user_type;
reg [2:0] vehicle_type;
// wires                                               
wire backGateOpens;
wire [6:0] cathode0;
wire [6:0] cathode1;
wire [6:0] cathode2;
wire [6:0] cathode3;
wire [7:0] Change;
wire gateOpens;
wire [7:0] lcd_db;
wire lcd_e;
wire lcd_rs;
wire lcd_rw;
wire [1:0] level;
wire [7:0] Money_Deposited;

wire sampler;                             

// assign statements (if any)                          
car_parking_system i1 (
// port map - connection between master ports and signals/registers   
	.back_sensor(back_sensor),
	.backGateOpens(backGateOpens),
	.cathode0(cathode0),
	.cathode1(cathode1),
	.cathode2(cathode2),
	.cathode3(cathode3),
	.Change(Change),
	.clk(clk),
	.EnterMoney(EnterMoney),
	.front_sensor(front_sensor),
	.gateOpens(gateOpens),
	.lcd_db(lcd_db),
	.lcd_e(lcd_e),
	.lcd_rs(lcd_rs),
	.lcd_rw(lcd_rw),
	.level(level),
	.level1_movement(level1_movement),
	.level2_movement(level2_movement),
	.level3_movement(level3_movement),
	.Money_Deposited(Money_Deposited),
	.password(password),
	.push_btn_clk(push_btn_clk),
	.rst(rst),
	.user_name(user_name),
	.user_type(user_type),
	.vehicle_type(vehicle_type)
);

// clk
always
begin
	clk = 1'b0;
	clk = #20000 1'b1;
	#20000;
end 

// front_sensor
initial
begin
	front_sensor = 1'b1;
end 

// password[0]
initial
begin
	password[0] = 1'b1;
end 

// password[1]
initial
begin
	password[1] = 1'b0;
end 
// user_name[ 1 ]
initial
begin
	user_name[1] = 1'b0;
end 
// user_name[ 0 ]
initial
begin
	user_name[0] = 1'b0;
end 

// user_type
initial
begin
	user_type = 1'b1;
end 

// back_sensor
initial
begin
	back_sensor = 1'b0;
end 

car_parking_system_vlg_sample_tst tb_sample (
	.back_sensor(back_sensor),
	.clk(clk),
	.EnterMoney(EnterMoney),
	.front_sensor(front_sensor),
	.level1_movement(level1_movement),
	.level2_movement(level2_movement),
	.level3_movement(level3_movement),
	.password(password),
	.push_btn_clk(push_btn_clk),
	.rst(rst),
	.user_name(user_name),
	.user_type(user_type),
	.vehicle_type(vehicle_type),
	.sampler_tx(sampler)
);

car_parking_system_vlg_check_tst tb_out(
	.backGateOpens(backGateOpens),
	.cathode0(cathode0),
	.cathode1(cathode1),
	.cathode2(cathode2),
	.cathode3(cathode3),
	.Change(Change),
	.gateOpens(gateOpens),
	.lcd_db(lcd_db),
	.lcd_e(lcd_e),
	.lcd_rs(lcd_rs),
	.lcd_rw(lcd_rw),
	.level(level),
	.Money_Deposited(Money_Deposited),
	.sampler_rx(sampler)
);
endmodule

